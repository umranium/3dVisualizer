/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package visualizer;

import java.awt.Component;
import java.awt.Graphics;
import java.awt.Point;
import java.util.ArrayList;
import java.util.List;
import javax.swing.Icon;
import javax.swing.JCheckBox;
import javax.swing.JLabel;
import javax.swing.JTree;
import javax.swing.event.TreeModelListener;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeCellRenderer;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreeCellRenderer;
import javax.swing.tree.TreeModel;
import javax.swing.tree.TreePath;
import javax.swing.tree.TreeSelectionModel;
import visualizer.renderer.RenderableComponent;

/**
 *
 * @author umran
 */
public class VisibilityTreePanel extends javax.swing.JPanel {
  
  public interface ComponentVisibilityChangeListener {
    void componentsVisibilityChanged(List<RenderableComponent> components);
  }
  
  private RenderableComponent rootComponent;
  private ComponentVisibilityChangeListener visibilityChangeListener;

  /**
   * Creates new form VisibilityTree
   */
  public VisibilityTreePanel(RenderableComponent rootComponent) {
    this.rootComponent = rootComponent;
    
    initComponents();
    
  }

  public void setVisibilityChangeListener(ComponentVisibilityChangeListener visibilityChangeListener) {
    this.visibilityChangeListener = visibilityChangeListener;
  }

  public ComponentVisibilityChangeListener getVisibilityChangeListener() {
    return visibilityChangeListener;
  }
  
  

  /**
   * This method is called from within the constructor to initialize the form. WARNING: Do NOT
   * modify this code. The content of this method is always regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    visibilityCheckBoxesListPopup = new javax.swing.JPopupMenu();
    toggleVisibilityMenuItem = new javax.swing.JMenuItem();
    makeVisibleMenuItem = new javax.swing.JMenuItem();
    makeInvisibleMenuItem = new javax.swing.JMenuItem();
    makeTreeVisibleMenuItem = new javax.swing.JMenuItem();
    makeTreeInvisibleMenuItem = new javax.swing.JMenuItem();
    javax.swing.JScrollPane jScrollPane1 = new javax.swing.JScrollPane();
    visibilityTree = new VisibilityTree(rootComponent);

    toggleVisibilityMenuItem.setLabel("Toggle Visibility");
    toggleVisibilityMenuItem.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        toggleVisibilityMenuItemActionPerformed(evt);
      }
    });
    visibilityCheckBoxesListPopup.add(toggleVisibilityMenuItem);

    makeVisibleMenuItem.setText("Make Visible");
    makeVisibleMenuItem.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        makeVisibleMenuItemActionPerformed(evt);
      }
    });
    visibilityCheckBoxesListPopup.add(makeVisibleMenuItem);

    makeInvisibleMenuItem.setText("Make Invisible");
    makeInvisibleMenuItem.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        makeInvisibleMenuItemActionPerformed(evt);
      }
    });
    visibilityCheckBoxesListPopup.add(makeInvisibleMenuItem);

    makeTreeVisibleMenuItem.setText("Make Tree Visible");
    makeTreeVisibleMenuItem.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        makeTreeVisibleMenuItemActionPerformed(evt);
      }
    });
    visibilityCheckBoxesListPopup.add(makeTreeVisibleMenuItem);

    makeTreeInvisibleMenuItem.setText("Make Tree Invisible");
    makeTreeInvisibleMenuItem.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        makeTreeInvisibleMenuItemActionPerformed(evt);
      }
    });
    visibilityCheckBoxesListPopup.add(makeTreeInvisibleMenuItem);

    setPreferredSize(new java.awt.Dimension(400, 600));
    setLayout(new java.awt.BorderLayout());

    visibilityTree.addMouseListener(new java.awt.event.MouseAdapter() {
      public void mousePressed(java.awt.event.MouseEvent evt) {
        visibilityTreeMousePressed(evt);
      }
      public void mouseReleased(java.awt.event.MouseEvent evt) {
        visibilityTreeMouseReleased(evt);
      }
    });
    jScrollPane1.setViewportView(visibilityTree);

    add(jScrollPane1, java.awt.BorderLayout.CENTER);
  }// </editor-fold>//GEN-END:initComponents

  private void toggleVisibilityMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_toggleVisibilityMenuItemActionPerformed

    setSelectedCheckboxesVisible(false, false, true);

  }//GEN-LAST:event_toggleVisibilityMenuItemActionPerformed

  private void makeVisibleMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_makeVisibleMenuItemActionPerformed

    setSelectedCheckboxesVisible(false, true, false);
  }//GEN-LAST:event_makeVisibleMenuItemActionPerformed

  private void makeInvisibleMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_makeInvisibleMenuItemActionPerformed

    setSelectedCheckboxesVisible(false, false, false);
  }//GEN-LAST:event_makeInvisibleMenuItemActionPerformed

  private void makeTreeVisibleMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_makeTreeVisibleMenuItemActionPerformed

    setSelectedCheckboxesVisible(true, true, false);
  }//GEN-LAST:event_makeTreeVisibleMenuItemActionPerformed

  private void makeTreeInvisibleMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_makeTreeInvisibleMenuItemActionPerformed

    setSelectedCheckboxesVisible(true, false, false);
  }//GEN-LAST:event_makeTreeInvisibleMenuItemActionPerformed

  private void visibilityTreeMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_visibilityTreeMousePressed
      
    if (evt.isPopupTrigger()) {
      processListPopup(evt);
    }

  }//GEN-LAST:event_visibilityTreeMousePressed

  private void visibilityTreeMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_visibilityTreeMouseReleased
    
    if (evt.isPopupTrigger()) {
      processListPopup(evt);
    }

    
  }//GEN-LAST:event_visibilityTreeMouseReleased

  private void processListPopup(java.awt.event.MouseEvent evt) {
//        int locItemIndex = visibilityCheckBoxesList.locationToIndex(evt.getPoint());
//        if (locItemIndex>=0) {
//            visibilityCheckBoxesList.addSelectionInterval(locItemIndex, locItemIndex);
//        }

    TreePath[] paths = visibilityTree.getSelectionPaths();
    
    if (paths==null) {
      return;
    }
    
    int countSelectedVisible = 0;
    int countSelectedInvisible = 0;
    int countGroups = 0;
    
    for (TreePath path:paths) {
      Object lastPathComp = path.getLastPathComponent();
      if (lastPathComp==null) {
        continue;
      }
      RenderableComponent comp = (RenderableComponent)lastPathComp;
      if (comp.isVisible()) {
        ++countSelectedVisible;
      } else {
        ++countSelectedInvisible;
      }
      if (comp.isGroup()) {
        ++countGroups;
      }
    }

    int countSelected = countSelectedVisible + countSelectedInvisible;
    
    makeVisibleMenuItem.setEnabled(countSelected > 0);
    makeInvisibleMenuItem.setEnabled(countSelected > 0);
    makeTreeVisibleMenuItem.setEnabled(countSelected > 0);
    makeTreeInvisibleMenuItem.setEnabled(countSelected > 0);

    Point mousePos = visibilityTree.getMousePosition();
    visibilityCheckBoxesListPopup.show(visibilityTree, (int)mousePos.getX(), (int)mousePos.getY());
  }

  private void setSelectedCheckboxesVisible(boolean tree, boolean visible, boolean toggle) {
    
    TreePath[] paths = visibilityTree.getSelectionPaths();
    
    if (paths==null || paths.length==0) {
      return;
    }
    
    List<RenderableComponent> changedComponents = new ArrayList<>(paths.length);
    for (TreePath path:paths) {
      Object lastPathComp = path.getLastPathComponent();
      if (lastPathComp==null) {
        continue;
      }
      RenderableComponent comp = (RenderableComponent)lastPathComp;
      if (tree) {
        comp.setTreeVisible(visible);
      } else {
        if (toggle) {
          comp.setVisible(!comp.isVisible());
        } else {
          comp.setVisible(visible, true);
        }
      }
      
      changedComponents.add(comp);
    }
    
    visibilityTree.treeDidChange();
    if (visibilityChangeListener!=null) {
      visibilityChangeListener.componentsVisibilityChanged(changedComponents);
    }
    
  }


  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JMenuItem makeInvisibleMenuItem;
  private javax.swing.JMenuItem makeTreeInvisibleMenuItem;
  private javax.swing.JMenuItem makeTreeVisibleMenuItem;
  private javax.swing.JMenuItem makeVisibleMenuItem;
  private javax.swing.JMenuItem toggleVisibilityMenuItem;
  private javax.swing.JPopupMenu visibilityCheckBoxesListPopup;
  private javax.swing.JTree visibilityTree;
  // End of variables declaration//GEN-END:variables


  private static class VisibilityTree extends JTree {

    public VisibilityTree(RenderableComponent root) {
      this.setModel(new VisibilityTreeModel(root));
      this.setCellRenderer(new VisibilityTreeCellRenderer(this));
      this.setEditable(false);
    }
    
  }
  
  private static class VisibilityTreeModel implements TreeModel {
    
    private RenderableComponent root;

    public VisibilityTreeModel(RenderableComponent root) {
      this.root = root;
    }
    
    @Override
    public Object getRoot() {
      return root;
    }

    @Override
    public Object getChild(Object parent, int index) {
      RenderableComponent parentComp = (RenderableComponent)parent;
      return parentComp.getChildren().get(index);
    }

    @Override
    public int getChildCount(Object parent) {
      RenderableComponent parentComp = (RenderableComponent)parent;
      return parentComp.getChildren().size();
    }

    @Override
    public boolean isLeaf(Object node) {
      RenderableComponent nodeComp = (RenderableComponent)node;
      return nodeComp.getChildren().isEmpty();
    }

    @Override
    public void valueForPathChanged(TreePath path, Object newValue) {
      throw new RuntimeException("Value for "+path+" has changed to "+newValue);
    }

    @Override
    public int getIndexOfChild(Object parent, Object child) {
      RenderableComponent parentComp = (RenderableComponent)parent;
      RenderableComponent childComp = (RenderableComponent)child;
      
      return parentComp.getChildren().indexOf(childComp);
    }

    @Override
    public void addTreeModelListener(TreeModelListener l) {
    }

    @Override
    public void removeTreeModelListener(TreeModelListener l) {
    }
  }
  
  private static class VisibilityTreeCellRenderer extends JCheckBox implements TreeCellRenderer {
    
    private JTree tree;
    private DefaultTreeCellRenderer cellRenderer = new DefaultTreeCellRenderer();

    public VisibilityTreeCellRenderer(JTree tree) {
      this.tree = tree;
    }
    
    @Override
    public Component getTreeCellRendererComponent(JTree tree, Object value, boolean selected, boolean expanded, boolean leaf, int row, boolean hasFocus) {
      RenderableComponent component = (RenderableComponent)value;
//      super.getTreeCellRendererComponent(tree, value, selected, expanded, leaf, row, hasFocus);
      
      this.setText(component.getName());
      this.setToolTipText(component.getDescription());
      this.setSelected(component.isVisible());
      this.setForeground(tree.getForeground());
      this.setFont(tree.getFont());
//      checkBox.setIcon(this.getIcon());
      
      if (selected) {
        this.setBackground(cellRenderer.getBackgroundSelectionColor());
      } else {
        this.setBackground(cellRenderer.getBackgroundNonSelectionColor());
      }
      
      return this;
    }
  }
  
}
